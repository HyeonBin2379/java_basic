[예외처리]
1.
답: 4

2.
답: 3 -> finally 블록은 예외 발생 여부에 관계없이 항상 실행되는 코드

3.
답: 4 -> throws가 아닌 throw를 사용

4.
답: 2 -> throws는 메서드 블록 내부에서 작성

5.
답: 2   -> method2()는 method1()이 던진 예외를 받은 다음, 다시 외부로 떠넘기는 방식으로 처리
정답: 3 -> catch문 작성 시, 작은 범위 예외부터 설정하고, 상위 예외 클래스로 나머지 예외를 처리

6.
출력 결과:
```
10			// 0번 인덱스 출력
숫자로 변환할 수 없음
10			// 예외 발생 후 finally 블록 실행(value에 저장된 이전 값 출력)
인덱스를 초과했음
10			// 예외 발생 후 finally 블록 실행
```

7.
답: homework.exception.ex07 패키지의 구현 코드 참조

8.
답: homework.exception.ex08 패키지의 구현 코드 참조


[컬렉션]
1. 
답: 4 - Stack은 LIFO 자료구조

2.
답: 3 -> ArrayList에서 객체 삭제 시, 빈 칸이 생기지 않도록 저장된 요소들의 위치를 재조정

3.
답: 4 -> 객체의 주소값을 저장 가능하므로 null도 저장 가능(단, 1회만 저장됨)

4.
답: 3 -> 멀티스레드 환경에서는 HashTable이 안전(동기화된 메서드를 사용하기 때문)

5.
답: 
1) List<Board>
2) ArrayList<>();

6.
답:
1) Map<String, Integer>
2) new HashMap<>();

7. homework.collection_ex07 패키지의 구현 코드 참조
